field.txt
applicationid
sector
region
microservice_table_rows

filter.txt
applicationid=1001
applicationid=2003



[user1@workstation email]$ cat filter.txt
applicationid=12346
applicationid=13546
[user1@workstation email]$



cat field.txt
applicationid
sector
region
microservice_table_rows




cat field-inventory.csv
region,sector,env,clustername,namespace,applicationid
apac,sec1,dev,cluster1,ns1,12346
nam,sec2,uat,cluster2,ns2,12346
nam,sec3,uat,cluster3,ns3,13546



cat /notifybot/inventory/inventory.csv
region,sector,env,clustername,namespace,microservice,applicationid,email
apac,sec1,dev,cluster1,ns1,ms1,12346,"user1@example.com;user2@example.com;user3@example.com"
nam,sec2,uat,cluster2,ns2,ms2,12346,"user3@example.com;user5@example.com;user6@example.com"
nam,sec3,uat,cluster3,ns3,ms3,13546,"user1@example.com;user2@example.com;user7@example.com"



Usage Instructions:

In your field.txt, list the columns you want in your table, plus microservice_table_rows:
sector
region
clustername
namespace
microservicename
replicacount
microservice_table_rows

The function will automatically generate table rows using all fields except microservice_table_rows as columns.
Make sure your table headers in body.html match the order and names of fields in field.txt.

This approach makes the table generation completely dynamic - you can change which columns appear in the table just by modifying field.txt, without needing to update the code.

* {dynamic_table}: Complete HTML table
* {table_rows}: Table rows only (basic styling)
* {styled_table_rows}: Table rows with striped styling
* {simple_table_rows}: Plain table rows (no styling)
* {csv_table_rows}: Pipe-separated text format
* {table_headers}: Table headers with styling
